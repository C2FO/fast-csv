/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['index.js']) {
  _$jscoverage['index.js'] = [];
  _$jscoverage['index.js'][122] = 0;
  _$jscoverage['index.js'][131] = 0;
  _$jscoverage['index.js'][132] = 0;
  _$jscoverage['index.js'][134] = 0;
  _$jscoverage['index.js'][135] = 0;
  _$jscoverage['index.js'][136] = 0;
  _$jscoverage['index.js'][137] = 0;
  _$jscoverage['index.js'][138] = 0;
  _$jscoverage['index.js'][139] = 0;
  _$jscoverage['index.js'][141] = 0;
  _$jscoverage['index.js'][143] = 0;
  _$jscoverage['index.js'][146] = 0;
  _$jscoverage['index.js'][147] = 0;
  _$jscoverage['index.js'][148] = 0;
  _$jscoverage['index.js'][150] = 0;
  _$jscoverage['index.js'][151] = 0;
  _$jscoverage['index.js'][152] = 0;
  _$jscoverage['index.js'][153] = 0;
  _$jscoverage['index.js'][154] = 0;
  _$jscoverage['index.js'][155] = 0;
  _$jscoverage['index.js'][156] = 0;
  _$jscoverage['index.js'][157] = 0;
  _$jscoverage['index.js'][158] = 0;
  _$jscoverage['index.js'][160] = 0;
  _$jscoverage['index.js'][161] = 0;
  _$jscoverage['index.js'][164] = 0;
  _$jscoverage['index.js'][165] = 0;
  _$jscoverage['index.js'][167] = 0;
  _$jscoverage['index.js'][168] = 0;
  _$jscoverage['index.js'][169] = 0;
  _$jscoverage['index.js'][170] = 0;
  _$jscoverage['index.js'][172] = 0;
  _$jscoverage['index.js'][175] = 0;
  _$jscoverage['index.js'][180] = 0;
  _$jscoverage['index.js'][181] = 0;
  _$jscoverage['index.js'][182] = 0;
  _$jscoverage['index.js'][183] = 0;
  _$jscoverage['index.js'][184] = 0;
  _$jscoverage['index.js'][186] = 0;
  _$jscoverage['index.js'][187] = 0;
  _$jscoverage['index.js'][189] = 0;
  _$jscoverage['index.js'][190] = 0;
  _$jscoverage['index.js'][191] = 0;
  _$jscoverage['index.js'][192] = 0;
  _$jscoverage['index.js'][194] = 0;
  _$jscoverage['index.js'][197] = 0;
  _$jscoverage['index.js'][199] = 0;
  _$jscoverage['index.js'][200] = 0;
  _$jscoverage['index.js'][201] = 0;
  _$jscoverage['index.js'][202] = 0;
  _$jscoverage['index.js'][203] = 0;
  _$jscoverage['index.js'][204] = 0;
  _$jscoverage['index.js'][205] = 0;
  _$jscoverage['index.js'][211] = 0;
  _$jscoverage['index.js'][212] = 0;
  _$jscoverage['index.js'][215] = 0;
  _$jscoverage['index.js'][216] = 0;
  _$jscoverage['index.js'][217] = 0;
  _$jscoverage['index.js'][218] = 0;
  _$jscoverage['index.js'][219] = 0;
  _$jscoverage['index.js'][222] = 0;
  _$jscoverage['index.js'][223] = 0;
  _$jscoverage['index.js'][224] = 0;
  _$jscoverage['index.js'][225] = 0;
  _$jscoverage['index.js'][226] = 0;
  _$jscoverage['index.js'][227] = 0;
  _$jscoverage['index.js'][228] = 0;
  _$jscoverage['index.js'][230] = 0;
  _$jscoverage['index.js'][233] = 0;
  _$jscoverage['index.js'][234] = 0;
  _$jscoverage['index.js'][235] = 0;
  _$jscoverage['index.js'][238] = 0;
  _$jscoverage['index.js'][240] = 0;
  _$jscoverage['index.js'][244] = 0;
  _$jscoverage['index.js'][247] = 0;
  _$jscoverage['index.js'][250] = 0;
  _$jscoverage['index.js'][251] = 0;
  _$jscoverage['index.js'][253] = 0;
  _$jscoverage['index.js'][254] = 0;
  _$jscoverage['index.js'][257] = 0;
  _$jscoverage['index.js'][258] = 0;
  _$jscoverage['index.js'][260] = 0;
  _$jscoverage['index.js'][261] = 0;
  _$jscoverage['index.js'][277] = 0;
  _$jscoverage['index.js'][278] = 0;
}
_$jscoverage['index.js'][122]++;
var fs = require("fs"), comb = require("comb"), EventEmitter = require("events").EventEmitter, Promise = comb.Promise, util = require("util"), out = process.stdout, Stream = require("stream").Stream;
_$jscoverage['index.js'][131]++;
var VALIDATE = /^\s*(?:'[^'\\]*(?:\\[\S\s][^'\\]*)*'|"[^"\\]*(?:\\[\S\s][^"\\]*)*"|[^,'"\s\\]*(?:\s+[^,'"\s\\]+)*)\s*(?:,\s*(?:'[^'\\]*(?:\\[\S\s][^'\\]*)*'|"[^"\\]*(?:\\[\S\s][^"\\]*)*"|[^,'"\s\\]*(?:\s+[^,'"\s\\]+)*)\s*)*$/;
_$jscoverage['index.js'][132]++;
var VALUE = /(?!\s*$)\s*(?:'([^'\\]*(?:\\[\S\s][^'\\]*)*)'|"([^"\\]*(?:\\[\S\s][^"\\]*)*)"|([^,'"\s\\]*(?:\s+[^,'"\s\\]+)*))\s*(?:,|$)/g;
_$jscoverage['index.js'][134]++;
var Parser = comb((function Parser(options) {
  _$jscoverage['index.js'][135]++;
  EventEmitter.call(this);
  _$jscoverage['index.js'][136]++;
  this._parsedHeaders = false;
  _$jscoverage['index.js'][137]++;
  this._rowCount = 0;
  _$jscoverage['index.js'][138]++;
  options = options || {};
  _$jscoverage['index.js'][139]++;
  this._headers = options.headers;
}));
_$jscoverage['index.js'][141]++;
util.inherits(Parser, EventEmitter);
_$jscoverage['index.js'][143]++;
Parser.extend({__parseLine: (function __parseLineData(data, index, ignore) {
  _$jscoverage['index.js'][146]++;
  if (! VALIDATE.test(data)) {
    _$jscoverage['index.js'][147]++;
    this.emit("error", new Error("Invalid row " + data));
    _$jscoverage['index.js'][148]++;
    return null;
  }
  _$jscoverage['index.js'][150]++;
  var a = [];
  _$jscoverage['index.js'][151]++;
  data.replace(VALUE, (function lineReplace(m0, m1, m2, m3) {
  _$jscoverage['index.js'][152]++;
  var item;
  _$jscoverage['index.js'][153]++;
  if (m1 !== undefined) {
    _$jscoverage['index.js'][154]++;
    item = m1.replace(/\\'/g, "'");
  }
  else {
    _$jscoverage['index.js'][155]++;
    if (m2 !== undefined) {
      _$jscoverage['index.js'][156]++;
      item = m2.replace(/\\"/g, "\"");
    }
    else {
      _$jscoverage['index.js'][157]++;
      if (m3 !== undefined) {
        _$jscoverage['index.js'][158]++;
        item = m3;
      }
    }
  }
  _$jscoverage['index.js'][160]++;
  a.push(item);
  _$jscoverage['index.js'][161]++;
  return "";
}).bind(this));
  _$jscoverage['index.js'][164]++;
  if (/,\s*$/.test(data)) {
    _$jscoverage['index.js'][165]++;
    a.push("");
  }
  _$jscoverage['index.js'][167]++;
  if (! ignore) {
    _$jscoverage['index.js'][168]++;
    a = this._transform(a, index);
    _$jscoverage['index.js'][169]++;
    if (this._validate(a, index)) {
      _$jscoverage['index.js'][170]++;
      return a;
    }
    else {
      _$jscoverage['index.js'][172]++;
      this.emit("data-invalid", a, index);
    }
  }
  else {
    _$jscoverage['index.js'][175]++;
    return a;
  }
}), _parse: (function _parseLine(data) {
  _$jscoverage['index.js'][180]++;
  var row, parseLine = this.__parseLine.bind(this), emitRow = this.emit.bind(this, "data");
  _$jscoverage['index.js'][181]++;
  if (! this._parsedHeaders) {
    _$jscoverage['index.js'][182]++;
    var headers = this._headers;
    _$jscoverage['index.js'][183]++;
    if (comb.isBoolean(headers) && headers) {
      _$jscoverage['index.js'][184]++;
      headers = parseLine(data.shift(), 0, true);
    }
    _$jscoverage['index.js'][186]++;
    if (comb.isArray(headers)) {
      _$jscoverage['index.js'][187]++;
      var headersLength = headers.length, orig = this._transform.bind(this);
      _$jscoverage['index.js'][189]++;
      this._transform = (function (data, index) {
  _$jscoverage['index.js'][190]++;
  var ret = {};
  _$jscoverage['index.js'][191]++;
  for (var i = 0; i < headersLength; i++) {
    _$jscoverage['index.js'][192]++;
    ret[headers[i]] = data[i];
}
  _$jscoverage['index.js'][194]++;
  return orig(ret, index);
});
    }
    _$jscoverage['index.js'][197]++;
    this._parsedHeaders = true;
  }
  _$jscoverage['index.js'][199]++;
  for (var i = 0, l = data.length; i < l; i++) {
    _$jscoverage['index.js'][200]++;
    row = data[i];
    _$jscoverage['index.js'][201]++;
    if (row) {
      _$jscoverage['index.js'][202]++;
      var count = this._rowCount++;
      _$jscoverage['index.js'][203]++;
      var dataRow = parseLine(row, count);
      _$jscoverage['index.js'][204]++;
      if (dataRow) {
        _$jscoverage['index.js'][205]++;
        emitRow(dataRow, count);
      }
    }
}
}), from: (function _from(from) {
  _$jscoverage['index.js'][211]++;
  this.__from = from;
  _$jscoverage['index.js'][212]++;
  return this;
}), parse: (function _parse(from) {
  _$jscoverage['index.js'][215]++;
  from = from || this.__from;
  _$jscoverage['index.js'][216]++;
  if (comb.isString(from)) {
    _$jscoverage['index.js'][217]++;
    from = fs.createReadStream(from);
    _$jscoverage['index.js'][218]++;
    from.on("end", (function () {
  _$jscoverage['index.js'][219]++;
  from.destroy();
}));
  }
  _$jscoverage['index.js'][222]++;
  if (comb.isObject(from) && from instanceof Stream) {
    _$jscoverage['index.js'][223]++;
    var lines = "", parse = this._parse.bind(this), end = this.emit.bind(this, "end");
    _$jscoverage['index.js'][224]++;
    from.on("data", (function streamOnData(data) {
  _$jscoverage['index.js'][225]++;
  var lineData = (lines + data).trim().split("\n");
  _$jscoverage['index.js'][226]++;
  if (lineData.length > 1) {
    _$jscoverage['index.js'][227]++;
    lines = lineData.pop();
    _$jscoverage['index.js'][228]++;
    parse(lineData);
  }
  else {
    _$jscoverage['index.js'][230]++;
    lines += data;
  }
}));
    _$jscoverage['index.js'][233]++;
    from.on("end", (function streamOnEnd() {
  _$jscoverage['index.js'][234]++;
  parse(lines.split("\n"));
  _$jscoverage['index.js'][235]++;
  end();
}));
  }
  else {
    _$jscoverage['index.js'][238]++;
    throw new TypeError("fast-csv.Parser#parse from must be a path or ReadableStream");
  }
  _$jscoverage['index.js'][240]++;
  return this;
}), _validate: (function (data, index) {
  _$jscoverage['index.js'][244]++;
  return true;
}), _transform: (function (data, index) {
  _$jscoverage['index.js'][247]++;
  return data;
}), validate: (function (cb) {
  _$jscoverage['index.js'][250]++;
  if (! comb.isFunction(cb)) {
    _$jscoverage['index.js'][251]++;
    throw new TypeError("fast-csv.Parser#validate requires a function");
  }
  _$jscoverage['index.js'][253]++;
  this._validate = cb;
  _$jscoverage['index.js'][254]++;
  return this;
}), transform: (function (cb) {
  _$jscoverage['index.js'][257]++;
  if (! comb.isFunction(cb)) {
    _$jscoverage['index.js'][258]++;
    throw new TypeError("fast-csv.Parser#transform requires a function");
  }
  _$jscoverage['index.js'][260]++;
  this._transform = cb;
  _$jscoverage['index.js'][261]++;
  return this;
})});
_$jscoverage['index.js'][277]++;
module.exports = (function parse(location, options) {
  _$jscoverage['index.js'][278]++;
  return new Parser(options).from(location);
});
_$jscoverage['index.js'].source = ["/**"," * @projectName fast-csv"," * @github https://github.com/C2FO/fast-csv"," * @includeDoc [Test Coverage] [../docs-md/coverage.html]"," * @header"," * This is a library is aimed at providing fast CSV parsing. It accomplishes this by not handling some of the more complex"," * edge cases such as multi line rows. However it does support escaped values, embedded commas, double and single quotes."," *"," * To parse a file."," * ```"," * var csv = require(\"fast-csv\");"," *"," * csv(\"my.csv\")"," *  .on(\"data\", function(data){"," *      console.log(data):"," *  })"," *  .on(\"end\", function(){"," *      console.log(\"done\");"," *  })"," *  .parse();"," * ```"," *"," * You may also parse a stream."," *"," * ```"," * var stream = fs.createReadStream(\"my.csv\");"," *"," * csv(stream)"," *  .on(\"data\", function(data){"," *      console.log(data):"," *  })"," *  .on(\"end\", function(){"," *      console.log(\"done\");"," *  })"," *  .parse();"," *"," * ```"," *"," * If you expect the first line your csv to headers you may pass a headers option in. Setting the headers option will"," * cause change each row to an object rather than an array."," *"," * ```"," * var stream = fs.createReadStream(\"my.csv\");"," *"," * csv(stream, {headers : true})"," *  .on(\"data\", function(data){"," *      console.log(data):"," *  })"," *  .on(\"end\", function(){"," *      console.log(\"done\");"," *  })"," *  .parse();"," *"," * ```"," *"," * You may alternatively pass an array of header names which must match the order of each column in the csv, otherwise"," * the data columns will not match."," *"," * ```"," * var stream = fs.createReadStream(\"my.csv\");"," *"," * csv(stream, {headers : [\"firstName\", \"lastName\", \"address\"]})"," *  .on(\"data\", function(data){"," *      console.log(data):"," *  })"," *  .on(\"end\", function(){"," *      console.log(\"done\");"," *  })"," *  .parse();"," *"," * ```"," *"," * ###Validating"," *"," * You can validate each row in the csv by providing a validate handler. If a row is invalid then a `data-invalid` event"," * will be emitted with the row and the index."," *"," * ```"," * var stream = fs.createReadStream(\"my.csv\");"," *"," * csv(stream, {headers : true})"," *  .validate(function(data){"," *      return data.age &lt; 50; //all persons must be under the age of 50"," *  })"," *  .on(\"data-invalid\", function(data){"," *      //do something with invalid row"," *  })"," *  .on(\"data\", function(data){"," *      console.log(data):"," *  })"," *  .on(\"end\", function(){"," *      console.log(\"done\");"," *  })"," *  .parse();"," *"," * ```"," *"," * ###Transforming"," *"," * You can transform data by providing in a transform function. What is returned from the transform function will"," * be provided to validate and emitted as a row."," *"," * ```"," * var stream = fs.createReadStream(\"my.csv\");"," *"," * csv(stream)"," *  .transform(function(data){"," *      return data.reverse(); //reverse each row."," *  })"," *  .on(\"data\", function(data){"," *      console.log(data):"," *  })"," *  .on(\"end\", function(){"," *      console.log(\"done\");"," *  })"," *  .parse();"," *"," * ```"," * @type {*}"," */","","var fs = require(\"fs\"),","    comb = require(\"comb\"),","    EventEmitter = require(\"events\").EventEmitter,","    Promise = comb.Promise,","    util = require(\"util\"),","    out = process.stdout,","    Stream = require(\"stream\").Stream;","","","var VALIDATE = /^\\s*(?:'[^'\\\\]*(?:\\\\[\\S\\s][^'\\\\]*)*'|\"[^\"\\\\]*(?:\\\\[\\S\\s][^\"\\\\]*)*\"|[^,'\"\\s\\\\]*(?:\\s+[^,'\"\\s\\\\]+)*)\\s*(?:,\\s*(?:'[^'\\\\]*(?:\\\\[\\S\\s][^'\\\\]*)*'|\"[^\"\\\\]*(?:\\\\[\\S\\s][^\"\\\\]*)*\"|[^,'\"\\s\\\\]*(?:\\s+[^,'\"\\s\\\\]+)*)\\s*)*$/;","var VALUE = /(?!\\s*$)\\s*(?:'([^'\\\\]*(?:\\\\[\\S\\s][^'\\\\]*)*)'|\"([^\"\\\\]*(?:\\\\[\\S\\s][^\"\\\\]*)*)\"|([^,'\"\\s\\\\]*(?:\\s+[^,'\"\\s\\\\]+)*))\\s*(?:,|$)/g;","","var Parser = comb(function Parser(options) {","    EventEmitter.call(this);","    this._parsedHeaders = false;","    this._rowCount = 0;","    options = options || {};","    this._headers = options.headers;","});","util.inherits(Parser, EventEmitter);","","Parser.extend({","    __parseLine:function __parseLineData(data, index, ignore) {","        // Return NULL if input string is not well formed CSV string.","        if (!VALIDATE.test(data)) {","            this.emit(\"error\", new Error(\"Invalid row \" + data));","            return null;","        }","        var a = [];","        data.replace(VALUE, function lineReplace(m0, m1, m2, m3) {","            var item;","            if (m1 !== undefined) {","                item = m1.replace(/\\\\'/g, \"'\");","            } else if (m2 !== undefined) {","                item = m2.replace(/\\\\\"/g, '\"');","            } else if (m3 !== undefined) {","                item = m3;","            }","            a.push(item);","            return ''; // Return empty string.","        }.bind(this));","        // Handle special case of empty last value.","        if (/,\\s*$/.test(data)) {","            a.push('');","        }","        if (!ignore) {","            a = this._transform(a, index);","            if (this._validate(a, index)) {","                return a;","            } else {","                this.emit(\"data-invalid\", a, index);","            }","        } else {","            return a;","        }","    },","","    _parse:function _parseLine(data) {","        var row, parseLine = this.__parseLine.bind(this), emitRow = this.emit.bind(this, \"data\");","        if (!this._parsedHeaders) {","            var headers = this._headers;","            if (comb.isBoolean(headers) &amp;&amp; headers) {","                headers = parseLine(data.shift(), 0, true);","            }","            if (comb.isArray(headers)) {","                var headersLength = headers.length,","                    orig = this._transform.bind(this);","                this._transform = function (data, index) {","                    var ret = {};","                    for (var i = 0; i &lt; headersLength; i++) {","                        ret[headers[i]] = data[i];","                    }","                    return orig(ret, index);","                };","            }","            this._parsedHeaders = true;","        }","        for (var i = 0, l = data.length; i &lt; l; i++) {","            row = data[i];","            if (row) {","                var count = this._rowCount++;","                var dataRow = parseLine(row, count);","                if (dataRow) {","                    emitRow(dataRow, count);","                }","            }","        }","    },","    from:function _from(from) {","        this.__from = from;","        return this;","    },","    parse:function _parse(from) {","        from = from || this.__from;","        if (comb.isString(from)) {","            from = fs.createReadStream(from);","            from.on(\"end\", function () {","                from.destroy();","            });","        }","        if (comb.isObject(from) &amp;&amp; from instanceof Stream) {","            var lines = \"\", parse = this._parse.bind(this), end = this.emit.bind(this, \"end\");","            from.on(\"data\", function streamOnData(data) {","                var lineData = (lines + data).trim().split(\"\\n\");","                if (lineData.length &gt; 1) {","                    lines = lineData.pop();","                    parse(lineData);","                } else {","                    lines += data;","                }","            });","            from.on(\"end\", function streamOnEnd() {","                parse(lines.split(\"\\n\"));","                end();","            });","        } else {","            throw new TypeError(\"fast-csv.Parser#parse from must be a path or ReadableStream\");","        }","        return this;","    },","","    _validate:function (data, index) {","        return true;","    },","    _transform:function (data, index) {","        return data;","    },","    validate:function (cb) {","        if (!comb.isFunction(cb)) {","            throw new TypeError(\"fast-csv.Parser#validate requires a function\");","        }","        this._validate = cb;","        return this;","    },","    transform:function (cb) {","        if (!comb.isFunction(cb)) {","            throw new TypeError(\"fast-csv.Parser#transform requires a function\");","        }","        this._transform = cb;","        return this;","    }","});","","/**"," * Entry point to `fast-csv`. `fast-csv` does not store rows its proccesses each row and emits it. If you wish to save"," * every row into an array you must store them yourself by using the `data` event. Once all rows are done processing"," * the `end` event is emitted."," *"," * Invoke to parse a csv file."," *"," * @name fast-csv"," * @param location"," * @param options"," * @return {*}"," */","module.exports = function parse(location, options) {","    return new Parser(options).from(location);","};"];
